; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch32 -global-isel -stop-after=irtranslator -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=LA32 %s
; RUN: llc --mtriple=loongarch64 -global-isel -stop-after=irtranslator -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=LA64 %s

declare void @void_noargs()

define void @test_call_void_noargs() {
  ; LA32-LABEL: name: test_call_void_noargs
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_noargs, implicit-def $r1
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_void_noargs
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_noargs, implicit-def $r1
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_noargs()
  ret void
}

declare void @void_args_i8(i8, i8)

define void @test_call_void_args_i8() {
  ; LA32-LABEL: name: test_call_void_args_i8
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
  ; LA32-NEXT:   [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA32-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[C]](s8)
  ; LA32-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s32) = G_ANYEXT [[C1]](s8)
  ; LA32-NEXT:   $r4 = COPY [[ANYEXT]](s32)
  ; LA32-NEXT:   $r5 = COPY [[ANYEXT1]](s32)
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i8, implicit-def $r1, implicit $r4, implicit $r5
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_void_args_i8
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
  ; LA64-NEXT:   [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA64-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s8)
  ; LA64-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s8)
  ; LA64-NEXT:   $r4 = COPY [[ANYEXT]](s64)
  ; LA64-NEXT:   $r5 = COPY [[ANYEXT1]](s64)
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i8, implicit-def $r1, implicit $r4, implicit $r5
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_args_i8(i8 0, i8 1)
  ret void
}

declare void @void_args_i8_zext(i8 zeroext, i8 zeroext)

define void @test_call_void_args_i8_zext() {
  ; LA32-LABEL: name: test_call_void_args_i8_zext
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
  ; LA32-NEXT:   [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA32-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[C]](s8)
  ; LA32-NEXT:   [[ZEXT1:%[0-9]+]]:_(s32) = G_ZEXT [[C1]](s8)
  ; LA32-NEXT:   $r4 = COPY [[ZEXT]](s32)
  ; LA32-NEXT:   $r5 = COPY [[ZEXT1]](s32)
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i8_zext, implicit-def $r1, implicit $r4, implicit $r5
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_void_args_i8_zext
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
  ; LA64-NEXT:   [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA64-NEXT:   [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[C]](s8)
  ; LA64-NEXT:   [[ZEXT1:%[0-9]+]]:_(s64) = G_ZEXT [[C1]](s8)
  ; LA64-NEXT:   $r4 = COPY [[ZEXT]](s64)
  ; LA64-NEXT:   $r5 = COPY [[ZEXT1]](s64)
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i8_zext, implicit-def $r1, implicit $r4, implicit $r5
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_args_i8_zext(i8 zeroext 0, i8 zeroext 1)
  ret void
}

declare void @void_args_i16_sext(i16 signext, i16 signext)

define void @test_call_void_args_i16_sext() {
  ; LA32-LABEL: name: test_call_void_args_i16_sext
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
  ; LA32-NEXT:   [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
  ; LA32-NEXT:   [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[C]](s16)
  ; LA32-NEXT:   [[SEXT1:%[0-9]+]]:_(s32) = G_SEXT [[C1]](s16)
  ; LA32-NEXT:   $r4 = COPY [[SEXT]](s32)
  ; LA32-NEXT:   $r5 = COPY [[SEXT1]](s32)
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i16_sext, implicit-def $r1, implicit $r4, implicit $r5
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_void_args_i16_sext
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
  ; LA64-NEXT:   [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
  ; LA64-NEXT:   [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C]](s16)
  ; LA64-NEXT:   [[SEXT1:%[0-9]+]]:_(s64) = G_SEXT [[C1]](s16)
  ; LA64-NEXT:   $r4 = COPY [[SEXT]](s64)
  ; LA64-NEXT:   $r5 = COPY [[SEXT1]](s64)
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i16_sext, implicit-def $r1, implicit $r4, implicit $r5
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_args_i16_sext(i16 signext 0, i16 signext 1)
  ret void
}

declare void @void_args_i32(i32, i32)

define void @test_call_void_args_i32() {
  ; LA32-LABEL: name: test_call_void_args_i32
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; LA32-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; LA32-NEXT:   $r4 = COPY [[C]](s32)
  ; LA32-NEXT:   $r5 = COPY [[C1]](s32)
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i32, implicit-def $r1, implicit $r4, implicit $r5
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_void_args_i32
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; LA64-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; LA64-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
  ; LA64-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
  ; LA64-NEXT:   $r4 = COPY [[ANYEXT]](s64)
  ; LA64-NEXT:   $r5 = COPY [[ANYEXT1]](s64)
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i32, implicit-def $r1, implicit $r4, implicit $r5
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_args_i32(i32 0, i32 1)
  ret void
}

declare void @void_args_i64(i64, i64)

define void @test_call_void_args_i64() {
  ; LA32-LABEL: name: test_call_void_args_i64
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; LA32-NEXT:   [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
  ; LA32-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
  ; LA32-NEXT:   [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C1]](s64)
  ; LA32-NEXT:   $r4 = COPY [[UV]](s32)
  ; LA32-NEXT:   $r5 = COPY [[UV1]](s32)
  ; LA32-NEXT:   $r6 = COPY [[UV2]](s32)
  ; LA32-NEXT:   $r7 = COPY [[UV3]](s32)
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i64, implicit-def $r1, implicit $r4, implicit $r5, implicit $r6, implicit $r7
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_void_args_i64
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; LA64-NEXT:   [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
  ; LA64-NEXT:   $r4 = COPY [[C]](s64)
  ; LA64-NEXT:   $r5 = COPY [[C1]](s64)
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_args_i64, implicit-def $r1, implicit $r4, implicit $r5
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_args_i64(i64 0, i64 1)
  ret void
}

declare i8 @i8_noargs()

define void @test_call_i8_noargs() {
  ; LA32-LABEL: name: test_call_i8_noargs
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i8_noargs, implicit-def $r1, implicit-def $r4
  ; LA32-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r4
  ; LA32-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]](s32)
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_i8_noargs
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i8_noargs, implicit-def $r1, implicit-def $r4
  ; LA64-NEXT:   [[COPY:%[0-9]+]]:_(s64) = COPY $r4
  ; LA64-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]](s64)
  ; LA64-NEXT:   PseudoRET
entry:
  %a = call i8 @i8_noargs()
  ret void
}

declare i16 @i16_noargs()

define void @test_call_i16_noargs() {
  ; LA32-LABEL: name: test_call_i16_noargs
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i16_noargs, implicit-def $r1, implicit-def $r4
  ; LA32-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r4
  ; LA32-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_i16_noargs
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i16_noargs, implicit-def $r1, implicit-def $r4
  ; LA64-NEXT:   [[COPY:%[0-9]+]]:_(s64) = COPY $r4
  ; LA64-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s64)
  ; LA64-NEXT:   PseudoRET
entry:
  %a = call i16 @i16_noargs()
  ret void
}

declare i32 @i32_noargs()

define void @test_call_i32_noargs() {
  ; LA32-LABEL: name: test_call_i32_noargs
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i32_noargs, implicit-def $r1, implicit-def $r4
  ; LA32-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r4
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_i32_noargs
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i32_noargs, implicit-def $r1, implicit-def $r4
  ; LA64-NEXT:   [[COPY:%[0-9]+]]:_(s64) = COPY $r4
  ; LA64-NEXT:   [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
  ; LA64-NEXT:   PseudoRET
entry:
  %a = call i32 @i32_noargs()
  ret void
}

declare i64 @i64_noargs()

define void @test_call_i64_noargs() {
  ; LA32-LABEL: name: test_call_i64_noargs
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i64_noargs, implicit-def $r1, implicit-def $r4, implicit-def $r5
  ; LA32-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r4
  ; LA32-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
  ; LA32-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_i64_noargs
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i64_noargs, implicit-def $r1, implicit-def $r4
  ; LA64-NEXT:   [[COPY:%[0-9]+]]:_(s64) = COPY $r4
  ; LA64-NEXT:   PseudoRET
entry:
  %a = call i64 @i64_noargs()
  ret void
}

declare ptr @ptr_noargs()

define void @test_call_ptr_noargs() {
  ; LA32-LABEL: name: test_call_ptr_noargs
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @ptr_noargs, implicit-def $r1, implicit-def $r4
  ; LA32-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $r4
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_ptr_noargs
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @ptr_noargs, implicit-def $r1, implicit-def $r4
  ; LA64-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $r4
  ; LA64-NEXT:   PseudoRET
entry:
  %a = call ptr @ptr_noargs()
  ret void
}

declare [2 x i32] @i32x2_noargs()

define void @test_call_i32x2_noargs() {
  ; LA32-LABEL: name: test_call_i32x2_noargs
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i32x2_noargs, implicit-def $r1, implicit-def $r4, implicit-def $r5
  ; LA32-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r4
  ; LA32-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_i32x2_noargs
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @i32x2_noargs, implicit-def $r1, implicit-def $r4, implicit-def $r5
  ; LA64-NEXT:   [[COPY:%[0-9]+]]:_(s64) = COPY $r4
  ; LA64-NEXT:   [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
  ; LA64-NEXT:   [[COPY1:%[0-9]+]]:_(s64) = COPY $r5
  ; LA64-NEXT:   [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
  ; LA64-NEXT:   PseudoRET
entry:
  %a = call [2 x i32] @i32x2_noargs()
  ret void
}

%struct.Foo = type { i32, i32, i32, i16, i8 }
@foo = global %struct.Foo { i32 1, i32 2, i32 3, i16 4, i8 5 }, align 4

declare void @void_byval_args(ptr byval(%struct.Foo) %f)

define void @test_void_byval_args() {
  ; LA32-LABEL: name: test_void_byval_args
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @foo
  ; LA32-NEXT:   $r4 = COPY [[GV]](p0)
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_byval_args, implicit-def $r1, implicit $r4
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_void_byval_args
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @foo
  ; LA64-NEXT:   $r4 = COPY [[GV]](p0)
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_byval_args, implicit-def $r1, implicit $r4
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_byval_args(ptr byval(%struct.Foo) @foo)
  ret void
}

declare void @void_sret_args(ptr sret(%struct.Foo) %f)

define void @test_void_sret_args() {
  ; LA32-LABEL: name: test_void_sret_args
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @foo
  ; LA32-NEXT:   $r4 = COPY [[GV]](p0)
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_sret_args, implicit-def $r1, implicit $r4
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_void_sret_args
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @foo
  ; LA64-NEXT:   $r4 = COPY [[GV]](p0)
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @void_sret_args, implicit-def $r1, implicit $r4
  ; LA64-NEXT:   PseudoRET
entry:
  call void @void_sret_args(ptr sret(%struct.Foo) @foo)
  ret void
}

declare external void @external_function()

define void @test_call_external() {
  ; LA32-LABEL: name: test_call_external
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @external_function, implicit-def $r1
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_external
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call-plt) @external_function, implicit-def $r1
  ; LA64-NEXT:   PseudoRET
entry:
  call void @external_function()
  ret void
}

declare dso_local void @dso_local_function()

define void @test_call_local() {
  ; LA32-LABEL: name: test_call_local
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoCALL target-flags(loongarch-call) @dso_local_function, implicit-def $r1
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_call_local
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoCALL target-flags(loongarch-call) @dso_local_function, implicit-def $r1
  ; LA64-NEXT:   PseudoRET
entry:
  call void @dso_local_function()
  ret void
}

define void @test_indirect_call(ptr %func) {
  ; LA32-LABEL: name: test_indirect_call
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   liveins: $r4
  ; LA32-NEXT: {{  $}}
  ; LA32-NEXT:   [[COPY:%[0-9]+]]:gpr(p0) = COPY $r4
  ; LA32-NEXT:   PseudoCALLIndirect [[COPY]](p0), implicit-def $r1
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_indirect_call
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   liveins: $r4
  ; LA64-NEXT: {{  $}}
  ; LA64-NEXT:   [[COPY:%[0-9]+]]:gpr(p0) = COPY $r4
  ; LA64-NEXT:   PseudoCALLIndirect [[COPY]](p0), implicit-def $r1
  ; LA64-NEXT:   PseudoRET
entry:
  call void %func()
  ret void
}
