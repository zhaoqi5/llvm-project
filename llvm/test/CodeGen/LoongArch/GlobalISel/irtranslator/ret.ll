; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch32 -global-isel -stop-after=irtranslator -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=LA32 %s
; RUN: llc --mtriple=loongarch64 -global-isel -stop-after=irtranslator -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=LA64 %s

define void @test_ret_void() {
  ; LA32-LABEL: name: test_ret_void
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   PseudoRET
  ;
  ; LA64-LABEL: name: test_ret_void
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   PseudoRET
entry:
  ret void
}

define i8 @test_ret_i8() {
  ; LA32-LABEL: name: test_ret_i8
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA32-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[C]](s8)
  ; LA32-NEXT:   $r4 = COPY [[ANYEXT]](s32)
  ; LA32-NEXT:   PseudoRET implicit $r4
  ;
  ; LA64-LABEL: name: test_ret_i8
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA64-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s8)
  ; LA64-NEXT:   $r4 = COPY [[ANYEXT]](s64)
  ; LA64-NEXT:   PseudoRET implicit $r4
entry:
  ret i8 1
}

define zeroext i8 @test_ret_i8_zext() {
  ; LA32-LABEL: name: test_ret_i8_zext
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA32-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[C]](s8)
  ; LA32-NEXT:   $r4 = COPY [[ZEXT]](s32)
  ; LA32-NEXT:   PseudoRET implicit $r4
  ;
  ; LA64-LABEL: name: test_ret_i8_zext
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; LA64-NEXT:   [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[C]](s8)
  ; LA64-NEXT:   $r4 = COPY [[ZEXT]](s64)
  ; LA64-NEXT:   PseudoRET implicit $r4
entry:
  ret i8 1
}

define signext i16 @test_ret_i16_sext() {
  ; LA32-LABEL: name: test_ret_i16_sext
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
  ; LA32-NEXT:   [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[C]](s16)
  ; LA32-NEXT:   $r4 = COPY [[SEXT]](s32)
  ; LA32-NEXT:   PseudoRET implicit $r4
  ;
  ; LA64-LABEL: name: test_ret_i16_sext
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
  ; LA64-NEXT:   [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C]](s16)
  ; LA64-NEXT:   $r4 = COPY [[SEXT]](s64)
  ; LA64-NEXT:   PseudoRET implicit $r4
entry:
  ret i16 1
}

define i32 @test_ret_i32() {
  ; LA32-LABEL: name: test_ret_i32
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; LA32-NEXT:   $r4 = COPY [[C]](s32)
  ; LA32-NEXT:   PseudoRET implicit $r4
  ;
  ; LA64-LABEL: name: test_ret_i32
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; LA64-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
  ; LA64-NEXT:   $r4 = COPY [[ANYEXT]](s64)
  ; LA64-NEXT:   PseudoRET implicit $r4
entry:
  ret i32 1
}

define i64 @test_ret_i64() {
  ; LA32-LABEL: name: test_ret_i64
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967296
  ; LA32-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
  ; LA32-NEXT:   $r4 = COPY [[UV]](s32)
  ; LA32-NEXT:   $r5 = COPY [[UV1]](s32)
  ; LA32-NEXT:   PseudoRET implicit $r4, implicit $r5
  ;
  ; LA64-LABEL: name: test_ret_i64
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967296
  ; LA64-NEXT:   $r4 = COPY [[C]](s64)
  ; LA64-NEXT:   PseudoRET implicit $r4
entry:
  ret i64 4294967296
}

define ptr @test_ret_ptr() {
  ; LA32-LABEL: name: test_ret_ptr
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[DEF:%[0-9]+]]:_(p0) = G_IMPLICIT_DEF
  ; LA32-NEXT:   $r4 = COPY [[DEF]](p0)
  ; LA32-NEXT:   PseudoRET implicit $r4
  ;
  ; LA64-LABEL: name: test_ret_ptr
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[DEF:%[0-9]+]]:_(p0) = G_IMPLICIT_DEF
  ; LA64-NEXT:   $r4 = COPY [[DEF]](p0)
  ; LA64-NEXT:   PseudoRET implicit $r4
entry:
  ret ptr undef
}

define [2 x i32] @test_ret_2xi32() {
  ; LA32-LABEL: name: test_ret_2xi32
  ; LA32: bb.1.entry:
  ; LA32-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; LA32-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; LA32-NEXT:   $r4 = COPY [[C]](s32)
  ; LA32-NEXT:   $r5 = COPY [[C1]](s32)
  ; LA32-NEXT:   PseudoRET implicit $r4, implicit $r5
  ;
  ; LA64-LABEL: name: test_ret_2xi32
  ; LA64: bb.1.entry:
  ; LA64-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; LA64-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; LA64-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
  ; LA64-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[C1]](s32)
  ; LA64-NEXT:   $r4 = COPY [[ANYEXT]](s64)
  ; LA64-NEXT:   $r5 = COPY [[ANYEXT1]](s64)
  ; LA64-NEXT:   PseudoRET implicit $r4, implicit $r5
entry:
  ret [2 x i32] [i32 1, i32 2]
}
