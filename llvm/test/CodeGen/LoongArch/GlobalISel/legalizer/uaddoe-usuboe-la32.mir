# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc --mtriple=loongarch32 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s

---
name:            uaddo_i8
body:             |
  bb.1:
    liveins: $r4, $r5

    ; CHECK-LABEL: name: uaddo_i8
    ; CHECK: liveins: $r4, $r5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $r4 = COPY [[ADD]](s32)
    ; CHECK-NEXT: $r5 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8), %5:_(s1) = G_UADDO %0, %1
    %6:_(s32) = G_ANYEXT %4(s8)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            uaddo_i16
body:             |
  bb.1:
    liveins: $r4, $r5

    ; CHECK-LABEL: name: uaddo_i16
    ; CHECK: liveins: $r4, $r5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $r4 = COPY [[ADD]](s32)
    ; CHECK-NEXT: $r5 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16), %5:_(s1) = G_UADDO %0, %1
    %6:_(s32) = G_ANYEXT %4(s16)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            uaddo_i32
body:             |
  bb.1:
    liveins: $r4, $r5

    ; CHECK-LABEL: name: uaddo_i32
    ; CHECK: liveins: $r4, $r5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[COPY1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; CHECK-NEXT: $r4 = COPY [[COPY2]](s32)
    ; CHECK-NEXT: $r5 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %0:_(s32) = COPY $r4
    %1:_(s32) = COPY $r5
    %2:_(s32), %3:_(s1) = G_UADDO %0, %1
    %4:_(s32) = G_ANYEXT %3(s1)
    $r4 = COPY %2(s32)
    $r5 = COPY %4(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            uaddo_i64
body:             |
  bb.1:
    liveins: $r4, $r5, $r6, $r7

    ; CHECK-LABEL: name: uaddo_i64
    ; CHECK: liveins: $r4, $r5, $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[COPY2]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[ADD1]], [[ICMP]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s32) = COPY [[ADD2]](s32)
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY5]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY5]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP3:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY4]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP2]](s32), [[ICMP3]], [[ICMP1]]
    ; CHECK-NEXT: $r4 = COPY [[COPY4]](s32)
    ; CHECK-NEXT: $r5 = COPY [[COPY5]](s32)
    ; CHECK-NEXT: $r6 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5, implicit $r6
    %2:_(s32) = COPY $r4
    %3:_(s32) = COPY $r5
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $r6
    %5:_(s32) = COPY $r7
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64), %7:_(s1) = G_UADDO %0, %1
    %8:_(s32), %9:_(s32) = G_UNMERGE_VALUES %6(s64)
    %10:_(s32) = G_ANYEXT %7(s1)
    $r4 = COPY %8(s32)
    $r5 = COPY %9(s32)
    $r6 = COPY %10(s32)
    PseudoRET implicit $r4, implicit $r5, implicit $r6

...
---
name:            usubo_i8
body:             |
  bb.1:
    liveins: $r4, $r5

    ; CHECK-LABEL: name: usubo_i8
    ; CHECK: liveins: $r4, $r5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $r4 = COPY [[SUB]](s32)
    ; CHECK-NEXT: $r5 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8), %5:_(s1) = G_USUBO %0, %1
    %6:_(s32) = G_ANYEXT %4(s8)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            usubo_i16
body:             |
  bb.1:
    liveins: $r4, $r5

    ; CHECK-LABEL: name: usubo_i16
    ; CHECK: liveins: $r4, $r5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $r4 = COPY [[SUB]](s32)
    ; CHECK-NEXT: $r5 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16), %5:_(s1) = G_USUBO %0, %1
    %6:_(s32) = G_ANYEXT %4(s16)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            usubo_i32
body:             |
  bb.1:
    liveins: $r4, $r5

    ; CHECK-LABEL: name: usubo_i32
    ; CHECK: liveins: $r4, $r5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $r4 = COPY [[SUB]](s32)
    ; CHECK-NEXT: $r5 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %0:_(s32) = COPY $r4
    %1:_(s32) = COPY $r5
    %2:_(s32), %3:_(s1) = G_USUBO %0, %1
    %4:_(s32) = G_ANYEXT %3(s1)
    $r4 = COPY %2(s32)
    $r5 = COPY %4(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            usubo_i64
body:             |
  bb.1:
    liveins: $r4, $r5, $r6, $r7

    ; CHECK-LABEL: name: usubo_i64
    ; CHECK: liveins: $r4, $r5, $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: [[SUB2:%[0-9]+]]:_(s32) = G_SUB [[SUB1]], [[ICMP]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP3:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP2]](s32), [[ICMP3]], [[ICMP1]]
    ; CHECK-NEXT: $r4 = COPY [[SUB]](s32)
    ; CHECK-NEXT: $r5 = COPY [[SUB2]](s32)
    ; CHECK-NEXT: $r6 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5, implicit $r6
    %2:_(s32) = COPY $r4
    %3:_(s32) = COPY $r5
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $r6
    %5:_(s32) = COPY $r7
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64), %7:_(s1) = G_USUBO %0, %1
    %8:_(s32), %9:_(s32) = G_UNMERGE_VALUES %6(s64)
    %10:_(s32) = G_ANYEXT %7(s1)
    $r4 = COPY %8(s32)
    $r5 = COPY %9(s32)
    $r6 = COPY %10(s32)
    PseudoRET implicit $r4, implicit $r5, implicit $r6

...
---
name:            uadde_i8
body:             |
  bb.1:
    liveins: $r4, $r5, $r6

    ; CHECK-LABEL: name: uadde_i8
    ; CHECK: liveins: $r4, $r5, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r6
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C2]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[ADD]], [[AND2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[ADD1]], [[C4]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND3]](s32), [[C3]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], %carry_in
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[AND4]]
    ; CHECK-NEXT: $r4 = COPY [[ADD1]](s32)
    ; CHECK-NEXT: $r5 = COPY [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s8) = G_TRUNC %3(s32)
    %carry_in:_(s32) = COPY $r6
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %4:_(s8), %5:_(s1) = G_UADDE %0, %1, %carry_in1
    %6:_(s32) = G_ANYEXT %4(s8)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            uadde_i16
body:             |
  bb.1:
    liveins: $r4, $r5, $r6

    ; CHECK-LABEL: name: uadde_i16
    ; CHECK: liveins: $r4, $r5, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r6
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C2]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[ADD]], [[AND2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[ADD1]], [[C4]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND3]](s32), [[C3]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], %carry_in
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[AND4]]
    ; CHECK-NEXT: $r4 = COPY [[ADD1]](s32)
    ; CHECK-NEXT: $r5 = COPY [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s16) = G_TRUNC %3(s32)
    %carry_in:_(s32) = COPY $r6
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %4:_(s16), %5:_(s1) = G_UADDE %0, %1, %carry_in1
    %6:_(s32) = G_ANYEXT %4(s16)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            uadde_i32
body:             |
  bb.1:
    liveins: $r4, $r5, $r6

    ; CHECK-LABEL: name: uadde_i32
    ; CHECK: liveins: $r4, $r5, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r6
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[COPY]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[ADD]], [[AND]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD1]](s32), [[C1]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], %carry_in
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[AND1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ADD1]](s32)
    ; CHECK-NEXT: $r4 = COPY [[COPY2]](s32)
    ; CHECK-NEXT: $r5 = COPY [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %0:_(s32) = COPY $r4
    %1:_(s32) = COPY $r5
    %carry_in:_(s32) = COPY $r6
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %2:_(s32), %3:_(s1) = G_UADDE %0, %1, %carry_in1
    %4:_(s32) = G_ANYEXT %3(s1)
    $r4 = COPY %2(s32)
    $r5 = COPY %4(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            uadde_i64
body:             |
  bb.1:
    liveins: $r4, $r5, $r6, $r7, $r8

    ; CHECK-LABEL: name: uadde_i64
    ; CHECK: liveins: $r4, $r5, $r6, $r7, $r8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r8
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[COPY2]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[ADD1]], [[ICMP]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(s32) = COPY [[ADD2]](s32)
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY5]](s32), [[COPY1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY5]](s32), [[COPY1]]
    ; CHECK-NEXT: [[ICMP3:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY4]](s32), [[COPY]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP2]](s32), [[ICMP3]], [[ICMP1]]
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C1]]
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(s32) = G_ADD [[COPY4]], [[AND]]
    ; CHECK-NEXT: [[ICMP4:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD3]](s32), [[AND]]
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(s32) = COPY [[ADD3]](s32)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(s32) = G_ADD [[COPY5]], [[AND1]]
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(s32) = G_ADD [[ADD4]], [[ICMP4]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(s32) = COPY [[ADD5]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY6]], [[C2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[COPY7]], [[C3]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP5:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[OR]](s32), [[C4]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP5]], %carry_in
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[SELECT]], [[AND2]]
    ; CHECK-NEXT: $r4 = COPY [[COPY6]](s32)
    ; CHECK-NEXT: $r5 = COPY [[COPY7]](s32)
    ; CHECK-NEXT: $r6 = COPY [[OR1]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5, implicit $r6
    %2:_(s32) = COPY $r4
    %3:_(s32) = COPY $r5
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $r6
    %5:_(s32) = COPY $r7
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %carry_in:_(s32) = COPY $r8
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %6:_(s64), %7:_(s1) = G_UADDE %0, %1, %carry_in1
    %8:_(s32), %9:_(s32) = G_UNMERGE_VALUES %6(s64)
    %10:_(s32) = G_ANYEXT %7(s1)
    $r4 = COPY %8(s32)
    $r5 = COPY %9(s32)
    $r6 = COPY %10(s32)
    PseudoRET implicit $r4, implicit $r5, implicit $r6

...
---
name:            usube_i8
body:             |
  bb.1:
    liveins: $r4, $r5, $r6

    ; CHECK-LABEL: name: usube_i8
    ; CHECK: liveins: $r4, $r5, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r6
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SUB]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C2]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[SUB]], [[AND2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[SUB]], [[C4]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND3]](s32), [[C3]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], %carry_in
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[AND4]]
    ; CHECK-NEXT: $r4 = COPY [[SUB1]](s32)
    ; CHECK-NEXT: $r5 = COPY [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s8) = G_TRUNC %3(s32)
    %carry_in:_(s32) = COPY $r6
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %4:_(s8), %5:_(s1) = G_USUBE %0, %1, %carry_in1
    %6:_(s32) = G_ANYEXT %4(s8)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            usube_i16
body:             |
  bb.1:
    liveins: $r4, $r5, $r6

    ; CHECK-LABEL: name: usube_i16
    ; CHECK: liveins: $r4, $r5, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r6
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SUB]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C2]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[SUB]], [[AND2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[SUB]], [[C4]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND3]](s32), [[C3]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], %carry_in
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[AND4]]
    ; CHECK-NEXT: $r4 = COPY [[SUB1]](s32)
    ; CHECK-NEXT: $r5 = COPY [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %2:_(s32) = COPY $r4
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $r5
    %1:_(s16) = G_TRUNC %3(s32)
    %carry_in:_(s32) = COPY $r6
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %4:_(s16), %5:_(s1) = G_USUBE %0, %1, %carry_in1
    %6:_(s32) = G_ANYEXT %4(s16)
    %7:_(s32) = G_ANYEXT %5(s1)
    $r4 = COPY %6(s32)
    $r5 = COPY %7(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            usube_i32
body:             |
  bb.1:
    liveins: $r4, $r5, $r6

    ; CHECK-LABEL: name: usube_i32
    ; CHECK: liveins: $r4, $r5, $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r6
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[SUB]](s32), [[COPY]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[SUB]], [[AND]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[SUB]](s32), [[C1]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], %carry_in
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[AND1]]
    ; CHECK-NEXT: $r4 = COPY [[SUB1]](s32)
    ; CHECK-NEXT: $r5 = COPY [[OR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5
    %0:_(s32) = COPY $r4
    %1:_(s32) = COPY $r5
    %carry_in:_(s32) = COPY $r6
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %2:_(s32), %3:_(s1) = G_USUBE %0, %1, %carry_in1
    %4:_(s32) = G_ANYEXT %3(s1)
    $r4 = COPY %2(s32)
    $r5 = COPY %4(s32)
    PseudoRET implicit $r4, implicit $r5

...
---
name:            usube_i64
body:             |
  bb.1:
    liveins: $r4, $r5, $r6, $r7, $r8

    ; CHECK-LABEL: name: usube_i64
    ; CHECK: liveins: $r4, $r5, $r6, $r7, $r8
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r4
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: %carry_in:_(s32) = COPY $r8
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: [[SUB2:%[0-9]+]]:_(s32) = G_SUB [[SUB1]], [[ICMP]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[SUB2]](s32), [[COPY1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[SUB2]](s32), [[COPY1]]
    ; CHECK-NEXT: [[ICMP3:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[SUB]](s32), [[COPY]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP2]](s32), [[ICMP3]], [[ICMP1]]
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %carry_in, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[DEF]], [[C1]]
    ; CHECK-NEXT: [[SUB3:%[0-9]+]]:_(s32) = G_SUB [[SUB]], [[AND]]
    ; CHECK-NEXT: [[ICMP4:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[SUB]](s32), [[AND]]
    ; CHECK-NEXT: [[SUB4:%[0-9]+]]:_(s32) = G_SUB [[SUB2]], [[AND1]]
    ; CHECK-NEXT: [[SUB5:%[0-9]+]]:_(s32) = G_SUB [[SUB4]], [[ICMP4]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[SUB]], [[C2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[SUB2]], [[C3]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP5:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[OR]](s32), [[C4]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP5]], %carry_in
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[SELECT]], [[AND2]]
    ; CHECK-NEXT: $r4 = COPY [[SUB3]](s32)
    ; CHECK-NEXT: $r5 = COPY [[SUB5]](s32)
    ; CHECK-NEXT: $r6 = COPY [[OR1]](s32)
    ; CHECK-NEXT: PseudoRET implicit $r4, implicit $r5, implicit $r6
    %2:_(s32) = COPY $r4
    %3:_(s32) = COPY $r5
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $r6
    %5:_(s32) = COPY $r7
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %carry_in:_(s32) = COPY $r8
    %carry_in1:_(s1) = G_TRUNC %carry_in
    %6:_(s64), %7:_(s1) = G_USUBE %0, %1, %carry_in1
    %8:_(s32), %9:_(s32) = G_UNMERGE_VALUES %6(s64)
    %10:_(s32) = G_ANYEXT %7(s1)
    $r4 = COPY %8(s32)
    $r5 = COPY %9(s32)
    $r6 = COPY %10(s32)
    PseudoRET implicit $r4, implicit $r5, implicit $r6

...
