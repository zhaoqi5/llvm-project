; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 -mattr=+lasx --verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define void @trunc_v4i64_to_v4i32(ptr %x) nounwind {
; CHECK-LABEL: trunc_v4i64_to_v4i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a0, 0
; CHECK-NEXT:    xvpickve2gr.d $a1, $xr0, 0
; CHECK-NEXT:    vinsgr2vr.w $vr1, $a1, 0
; CHECK-NEXT:    xvpickve2gr.d $a1, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.w $vr1, $a1, 1
; CHECK-NEXT:    xvpickve2gr.d $a1, $xr0, 2
; CHECK-NEXT:    vinsgr2vr.w $vr1, $a1, 2
; CHECK-NEXT:    xvpickve2gr.d $a1, $xr0, 3
; CHECK-NEXT:    vinsgr2vr.w $vr1, $a1, 3
; CHECK-NEXT:    vst $vr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <4 x i64>, ptr %x
  %b = trunc <4 x i64> %a to <4 x i32>
  store <4 x i32> %b, ptr %x
  ret void
}

define void @trunc_v8i32_to_v8i16(ptr %x) nounwind {
; CHECK-LABEL: trunc_v8i32_to_v8i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a0, 0
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 0
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 0
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 1
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 2
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 2
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 3
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 3
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 4
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 4
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 5
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 5
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 6
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 6
; CHECK-NEXT:    xvpickve2gr.w $a1, $xr0, 7
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 7
; CHECK-NEXT:    vst $vr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <8 x i32>, ptr %x
  %b = trunc <8 x i32> %a to <8 x i16>
  store <8 x i16> %b, ptr %x
  ret void
}

define void @trunc_v16i16_to_v16i8(ptr %x) nounwind {
; CHECK-LABEL: trunc_v16i16_to_v16i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi.d $sp, $sp, -64
; CHECK-NEXT:    st.d $ra, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $fp, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    addi.d $fp, $sp, 64
; CHECK-NEXT:    bstrins.d $sp, $zero, 4, 0
; CHECK-NEXT:    xvld $xr0, $a0, 0
; CHECK-NEXT:    xvst $xr0, $sp, 0
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 0
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 0
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 1
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 1
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 2
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 2
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 3
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 3
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 4
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 4
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 5
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 5
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 6
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 6
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 7
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 7
; CHECK-NEXT:    ld.h $a1, $sp, 16
; CHECK-NEXT:    ld.h $a2, $sp, 18
; CHECK-NEXT:    ld.h $a3, $sp, 20
; CHECK-NEXT:    ld.h $a4, $sp, 22
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 8
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a2, 9
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a3, 10
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a4, 11
; CHECK-NEXT:    ld.h $a1, $sp, 24
; CHECK-NEXT:    ld.h $a2, $sp, 26
; CHECK-NEXT:    ld.h $a3, $sp, 28
; CHECK-NEXT:    ld.h $a4, $sp, 30
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a1, 12
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a2, 13
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a3, 14
; CHECK-NEXT:    vinsgr2vr.b $vr1, $a4, 15
; CHECK-NEXT:    vst $vr1, $a0, 0
; CHECK-NEXT:    addi.d $sp, $fp, -64
; CHECK-NEXT:    ld.d $fp, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 64
; CHECK-NEXT:    ret
entry:
  %a = load <16 x i16>, ptr %x
  %b = trunc <16 x i16> %a to <16 x i8>
  store <16 x i8> %b, ptr %x
  ret void
}

define void @tru_v4i64_to_v4i32(ptr %x) nounwind {
entry:
  %a = load <4 x i64>, ptr %x
  %b = trunc <4 x i64> %a to <4 x i16>
  store <4 x i16> %b, ptr %x
  ret void
}

define void @tu_v4i64_to_v4i32(ptr %x) nounwind {
entry:
  %a = load <4 x i64>, ptr %x
  %b = trunc <4 x i64> %a to <4 x i8>
  store <4 x i8> %b, ptr %x
  ret void
}

define void @u_v4i64_to_v4i32(ptr %x) nounwind {
entry:
  %a = load <4 x i64>, ptr %x
  %b = trunc <4 x i64> %a to <4 x i1>
  store <4 x i1> %b, ptr %x
  ret void
}

define void @tru_v8i32_to_v8i16(ptr %x) nounwind {
entry:
  %a = load <8 x i64>, ptr %x
  %b = trunc <8 x i64> %a to <8 x i16>
  store <8 x i16> %b, ptr %x
  ret void
}

