; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 -mattr=+lasx --verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define void @sext_v4i32_to_v4i64(ptr %x) nounwind {
; CHECK-LABEL: sext_v4i32_to_v4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a0, 0
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 0
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 0
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 1
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 1
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 2
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 2
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 3
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 3
; CHECK-NEXT:    xvst $xr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <4 x i32>, ptr %x
  %b = sext <4 x i32> %a to <4 x i64>
  store <4 x i64> %b, ptr %x
  ret void
}

define void @s_v4i32_to_v4i64(ptr %x) nounwind {
entry:
  %a = load <4 x i16>, ptr %x
  %b = sext <4 x i16> %a to <4 x i64>
  store <4 x i64> %b, ptr %x
  ret void
}

define void @zext_v4i32_to_v4i64(ptr %x) nounwind {
; CHECK-LABEL: zext_v4i32_to_v4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a0, 0
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 0
; CHECK-NEXT:    bstrpick.d $a1, $a1, 31, 0
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 0
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 1
; CHECK-NEXT:    bstrpick.d $a1, $a1, 31, 0
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 1
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 2
; CHECK-NEXT:    bstrpick.d $a1, $a1, 31, 0
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 2
; CHECK-NEXT:    vpickve2gr.w $a1, $vr0, 3
; CHECK-NEXT:    bstrpick.d $a1, $a1, 31, 0
; CHECK-NEXT:    xvinsgr2vr.d $xr1, $a1, 3
; CHECK-NEXT:    xvst $xr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <4 x i32>, ptr %x
  %b = zext <4 x i32> %a to <4 x i64>
  store <4 x i64> %b, ptr %x
  ret void
}

define void @sext_v8i16_to_v8i32(ptr %x) nounwind {
; CHECK-LABEL: sext_v8i16_to_v8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a0, 0
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 0
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 0
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 1
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 1
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 2
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 2
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 3
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 3
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 4
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 4
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 5
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 5
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 6
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 6
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 7
; CHECK-NEXT:    ext.w.h $a1, $a1
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 7
; CHECK-NEXT:    xvst $xr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <8 x i16>, ptr %x
  %b = sext <8 x i16> %a to <8 x i32>
  store <8 x i32> %b, ptr %x
  ret void
}

define void @zext_v8i16_to_v8i32(ptr %x) nounwind {
; CHECK-LABEL: zext_v8i16_to_v8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a0, 0
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 0
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 0
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 1
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 1
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 2
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 2
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 3
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 3
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 4
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 4
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 5
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 5
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 6
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 6
; CHECK-NEXT:    vpickve2gr.h $a1, $vr0, 7
; CHECK-NEXT:    bstrpick.d $a1, $a1, 15, 0
; CHECK-NEXT:    xvinsgr2vr.w $xr1, $a1, 7
; CHECK-NEXT:    xvst $xr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <8 x i16>, ptr %x
  %b = zext <8 x i16> %a to <8 x i32>
  store <8 x i32> %b, ptr %x
  ret void
}

define void @sext_v16i8_to_v16i16(ptr %x) nounwind {
; CHECK-LABEL: sext_v16i8_to_v16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr1, $a0, 0
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 0
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 0
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 1
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 1
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 2
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 3
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 3
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 4
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 4
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 5
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 5
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 6
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 6
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 7
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 7
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 8
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 0
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 9
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 1
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 10
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 2
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 11
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 3
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 12
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 4
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 13
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 5
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 14
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 6
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 15
; CHECK-NEXT:    ext.w.b $a1, $a1
; CHECK-NEXT:    xvori.b $xr1, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr1, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 7
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    xvst $xr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <16 x i8>, ptr %x
  %b = sext <16 x i8> %a to <16 x i16>
  store <16 x i16> %b, ptr %x
  ret void
}

define void @zext_v16i8_to_v16i16(ptr %x) nounwind {
; CHECK-LABEL: zext_v16i8_to_v16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr1, $a0, 0
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 0
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 0
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 1
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 1
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 2
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 3
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 3
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 4
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 4
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 5
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 5
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 6
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 6
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 7
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a1, 7
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 8
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 0
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 9
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 1
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 10
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 2
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 11
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 3
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 12
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 4
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 13
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 5
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 14
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr2, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr2, $a1, 6
; CHECK-NEXT:    xvpermi.q $xr0, $xr2, 2
; CHECK-NEXT:    vpickve2gr.b $a1, $vr1, 15
; CHECK-NEXT:    andi $a1, $a1, 255
; CHECK-NEXT:    xvori.b $xr1, $xr0, 0
; CHECK-NEXT:    xvpermi.q $xr1, $xr0, 1
; CHECK-NEXT:    vinsgr2vr.h $vr1, $a1, 7
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    xvst $xr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %a = load <16 x i8>, ptr %x
  %b = zext <16 x i8> %a to <16 x i16>
  store <16 x i16> %b, ptr %x
  ret void
}
